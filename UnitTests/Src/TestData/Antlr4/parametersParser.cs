//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\tmp\parameters.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class parametersParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INTEGER=8, NUMBER=9, 
		STRING=10, OBJECT_REF=11, TEXT=12, WS=13;
	public const int
		RULE_parameters = 0, RULE_arrayArgumentsList = 1, RULE_argumentsList = 2, 
		RULE_pterminal = 3, RULE_bterminal = 4, RULE_singleArgument = 5, RULE_array = 6, 
		RULE_value = 7;
	public static readonly string[] ruleNames = {
		"parameters", "arrayArgumentsList", "argumentsList", "pterminal", "bterminal", 
		"singleArgument", "array", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "')'", "']'", "'['", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INTEGER", "NUMBER", "STRING", 
		"OBJECT_REF", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "parameters.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public parametersParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParametersContext : ParserRuleContext {
		public ArgumentsListContext argumentsList() {
			return GetRuleContext<ArgumentsListContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 0, RULE_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; argumentsList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayArgumentsListContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public BterminalContext bterminal() {
			return GetRuleContext<BterminalContext>(0);
		}
		public ArrayArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayArgumentsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterArrayArgumentsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitArrayArgumentsList(this);
		}
	}

	[RuleVersion(0)]
	public ArrayArgumentsListContext arrayArgumentsList() {
		ArrayArgumentsListContext _localctx = new ArrayArgumentsListContext(Context, State);
		EnterRule(_localctx, 2, RULE_arrayArgumentsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; value();
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 19; Match(T__0);
				State = 20; value();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 26; bterminal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsListContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public PterminalContext pterminal() {
			return GetRuleContext<PterminalContext>(0);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterArgumentsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitArgumentsList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsListContext argumentsList() {
		ArgumentsListContext _localctx = new ArgumentsListContext(Context, State);
		EnterRule(_localctx, 4, RULE_argumentsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; value();
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 29; Match(T__0);
				State = 30; value();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 36; pterminal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PterminalContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(parametersParser.Eof, 0); }
		public PterminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pterminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterPterminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitPterminal(this);
		}
	}

	[RuleVersion(0)]
	public PterminalContext pterminal() {
		PterminalContext _localctx = new PterminalContext(Context, State);
		EnterRule(_localctx, 6, RULE_pterminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_la = TokenStream.La(1);
			if ( !(_la==Eof || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BterminalContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(parametersParser.Eof, 0); }
		public BterminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bterminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterBterminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitBterminal(this);
		}
	}

	[RuleVersion(0)]
	public BterminalContext bterminal() {
		BterminalContext _localctx = new BterminalContext(Context, State);
		EnterRule(_localctx, 8, RULE_bterminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.La(1);
			if ( !(_la==Eof || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleArgumentContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(parametersParser.Eof, 0); }
		public SingleArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterSingleArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitSingleArgument(this);
		}
	}

	[RuleVersion(0)]
	public SingleArgumentContext singleArgument() {
		SingleArgumentContext _localctx = new SingleArgumentContext(Context, State);
		EnterRule(_localctx, 10, RULE_singleArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; value();
			State = 43; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	 
		public ArrayContext() { }
		public virtual void CopyFrom(ArrayContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayOfValuesContext : ArrayContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayOfValuesContext(ArrayContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterArrayOfValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitArrayOfValues(this);
		}
	}
	public partial class EmptyArrayContext : ArrayContext {
		public EmptyArrayContext(ArrayContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterEmptyArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitEmptyArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 12, RULE_array);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ArrayOfValuesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(T__3);
				State = 46; value();
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__0) {
					{
					{
					State = 47; Match(T__0);
					State = 48; value();
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 54; Match(T__2);
				}
				break;
			case 2:
				_localctx = new EmptyArrayContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(T__3);
				State = 57; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : ValueContext {
		public ITerminalNode INTEGER() { return GetToken(parametersParser.INTEGER, 0); }
		public IntegerContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}
	public partial class NullContext : ValueContext {
		public NullContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
	}
	public partial class EmptyContext : ValueContext {
		public EmptyContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
	}
	public partial class NumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(parametersParser.NUMBER, 0); }
		public NumberContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}
	public partial class UndelimitedTextContext : ValueContext {
		public ITerminalNode TEXT() { return GetToken(parametersParser.TEXT, 0); }
		public UndelimitedTextContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterUndelimitedText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitUndelimitedText(this);
		}
	}
	public partial class ArrayObjectContext : ValueContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayObjectContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterArrayObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitArrayObject(this);
		}
	}
	public partial class TrueContext : ValueContext {
		public TrueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
	}
	public partial class StringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(parametersParser.STRING, 0); }
		public StringContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}
	public partial class FalseContext : ValueContext {
		public FalseContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
	}
	public partial class ObjectRefContext : ValueContext {
		public ITerminalNode OBJECT_REF() { return GetToken(parametersParser.OBJECT_REF, 0); }
		public ObjectRefContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.EnterObjectRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IparametersListener typedListener = listener as IparametersListener;
			if (typedListener != null) typedListener.ExitObjectRef(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_value);
		try {
			State = 70;
			switch (TokenStream.La(1)) {
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; Match(NUMBER);
				}
				break;
			case INTEGER:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; Match(INTEGER);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; Match(STRING);
				}
				break;
			case OBJECT_REF:
				_localctx = new ObjectRefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; Match(OBJECT_REF);
				}
				break;
			case TEXT:
				_localctx = new UndelimitedTextContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; Match(TEXT);
				}
				break;
			case T__3:
				_localctx = new ArrayObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 65; array();
				}
				break;
			case T__4:
				_localctx = new TrueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 66; Match(T__4);
				}
				break;
			case T__5:
				_localctx = new FalseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 67; Match(T__5);
				}
				break;
			case T__6:
				_localctx = new NullContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 68; Match(T__6);
				}
				break;
			case Eof:
			case T__0:
			case T__1:
			case T__2:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xF");
		sb.Append("K\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3");
		sb.Append("\x18\n\x3\f\x3\xE\x3\x1B\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4");
		sb.Append("\a\x4\"\n\x4\f\x4\xE\x4%\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\a\b\x34\n\b\f\b\xE");
		sb.Append("\b\x37\v\b\x3\b\x3\b\x3\b\x3\b\x5\b=\n\b\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tI\n\t\x3\t\x2\x2\n\x2\x4");
		sb.Append("\x6\b\n\f\xE\x10\x2\x4\x3\x3\x4\x4\x3\x3\x5\x5O\x2\x12\x3\x2");
		sb.Append("\x2\x2\x4\x14\x3\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b(\x3\x2\x2\x2");
		sb.Append("\n*\x3\x2\x2\x2\f,\x3\x2\x2\x2\xE<\x3\x2\x2\x2\x10H\x3\x2\x2");
		sb.Append("\x2\x12\x13\x5\x6\x4\x2\x13\x3\x3\x2\x2\x2\x14\x19\x5\x10\t");
		sb.Append("\x2\x15\x16\a\x3\x2\x2\x16\x18\x5\x10\t\x2\x17\x15\x3\x2\x2");
		sb.Append("\x2\x18\x1B\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3\x2\x2");
		sb.Append("\x2\x1A\x1C\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1D\x5\n\x6");
		sb.Append("\x2\x1D\x5\x3\x2\x2\x2\x1E#\x5\x10\t\x2\x1F \a\x3\x2\x2 \"\x5");
		sb.Append("\x10\t\x2!\x1F\x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2#$\x3");
		sb.Append("\x2\x2\x2$&\x3\x2\x2\x2%#\x3\x2\x2\x2&\'\x5\b\x5\x2\'\a\x3\x2");
		sb.Append("\x2\x2()\t\x2\x2\x2)\t\x3\x2\x2\x2*+\t\x3\x2\x2+\v\x3\x2\x2");
		sb.Append("\x2,-\x5\x10\t\x2-.\a\x2\x2\x3.\r\x3\x2\x2\x2/\x30\a\x6\x2\x2");
		sb.Append("\x30\x35\x5\x10\t\x2\x31\x32\a\x3\x2\x2\x32\x34\x5\x10\t\x2");
		sb.Append("\x33\x31\x3\x2\x2\x2\x34\x37\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2");
		sb.Append("\x35\x36\x3\x2\x2\x2\x36\x38\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2");
		sb.Append("\x38\x39\a\x5\x2\x2\x39=\x3\x2\x2\x2:;\a\x6\x2\x2;=\a\x5\x2");
		sb.Append("\x2</\x3\x2\x2\x2<:\x3\x2\x2\x2=\xF\x3\x2\x2\x2>I\a\v\x2\x2");
		sb.Append("?I\a\n\x2\x2@I\a\f\x2\x2\x41I\a\r\x2\x2\x42I\a\xE\x2\x2\x43");
		sb.Append("I\x5\xE\b\x2\x44I\a\a\x2\x2\x45I\a\b\x2\x2\x46I\a\t\x2\x2GI");
		sb.Append("\x3\x2\x2\x2H>\x3\x2\x2\x2H?\x3\x2\x2\x2H@\x3\x2\x2\x2H\x41");
		sb.Append("\x3\x2\x2\x2H\x42\x3\x2\x2\x2H\x43\x3\x2\x2\x2H\x44\x3\x2\x2");
		sb.Append("\x2H\x45\x3\x2\x2\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2\x2I\x11\x3");
		sb.Append("\x2\x2\x2\a\x19#\x35<H");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
