//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\tmp\parameters by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class parametersLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INTEGER=8, NUMBER=9, 
		STRING=10, OBJECT_REF=11, TEXT=12, WS=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "INTEGER", "NUMBER", 
		"INT", "EXP", "STRING", "SINGLE_QUOTE_STRING", "M4_QUOTES", "ESC", "UNICODE", 
		"HEX", "OBJECT_REF", "OBJECT_START_CHARS", "OBJECT_BODY_CHARS", "OBJECT_END_CHAR", 
		"TEXT", "INNER_PARENS", "INNER_BRACKETS", "MACRO_START_CHARS", "NOT_MACRO_START_CHARS", 
		"WS"
	};


	public parametersLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "')'", "']'", "'['", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INTEGER", "NUMBER", "STRING", 
		"OBJECT_REF", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "parameters"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\xF");
		sb.Append("\xE4\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x5\tS\n\t\x3\t\x6\tV\n");
		sb.Append("\t\r\t\xE\tW\x3\n\x5\n[\n\n\x3\n\a\n^\n\n\f\n\xE\n\x61\v\n\x3");
		sb.Append("\n\x3\n\x6\n\x65\n\n\r\n\xE\n\x66\x3\v\x6\vj\n\v\r\v\xE\vk\x3");
		sb.Append("\f\x3\f\x5\fp\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\rw\n\r\f\r\xE\r");
		sb.Append("z\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x81\n\xE\f\xE\xE\xE\x84");
		sb.Append("\v\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x93\n\xF\f\xF\xE\xF\x96\v\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\x9F\n\x10");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3");
		sb.Append("\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\a\x15");
		sb.Append("\xB1\n\x15\f\x15\xE\x15\xB4\v\x15\x3\x16\x3\x16\x3\x17\x3\x17");
		sb.Append("\x5\x17\xBA\n\x17\x3\x17\x3\x17\x3\x17\a\x17\xBF\n\x17\f\x17");
		sb.Append("\xE\x17\xC2\v\x17\x3\x18\x3\x18\x3\x18\a\x18\xC7\n\x18\f\x18");
		sb.Append("\xE\x18\xCA\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\xD1");
		sb.Append("\n\x19\f\x19\xE\x19\xD4\v\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x6\x1C\xDF\n\x1C\r\x1C\xE\x1C");
		sb.Append("\xE0\x3\x1C\x3\x1C\x6k\x94\xC8\xD2\x2\x1D\x3\x3\x5\x4\a\x5\t");
		sb.Append("\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\x2\x17\x2\x19\f\x1B\x2\x1D");
		sb.Append("\x2\x1F\x2!\x2#\x2%\r\'\x2)\x2+\x2-\xE/\x2\x31\x2\x33\x2\x35");
		sb.Append("\x2\x37\xF\x3\x2\xE\x3\x2\x32;\x4\x2GGgg\x4\x2--//\x4\x2$$\'");
		sb.Append("\'\x4\x2\'\'))\t\x2$$\'\'\x64\x64hhppttvv\x5\x2\x32;\x43H\x63");
		sb.Append("h\x6\x2%%\x42\\\x61\x61\x63|\x4\x2\x30\x61\x63|\x6\x2\x32;\x43");
		sb.Append("\\\x61\x61\x63|\x6\x2++..^_\xE003\xE003\x6\x2\v\f\xF\xF\"\"");
		sb.Append("\xE003\xE003\xF2\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3");
		sb.Append("\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2");
		sb.Append("\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2");
		sb.Append("\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2%\x3");
		sb.Append("\x2\x2\x2\x2-\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x3\x39\x3\x2\x2");
		sb.Append("\x2\x5;\x3\x2\x2\x2\a=\x3\x2\x2\x2\t?\x3\x2\x2\x2\v\x41\x3\x2");
		sb.Append("\x2\x2\r\x46\x3\x2\x2\x2\xFL\x3\x2\x2\x2\x11R\x3\x2\x2\x2\x13");
		sb.Append("Z\x3\x2\x2\x2\x15i\x3\x2\x2\x2\x17m\x3\x2\x2\x2\x19s\x3\x2\x2");
		sb.Append("\x2\x1B}\x3\x2\x2\x2\x1D\x89\x3\x2\x2\x2\x1F\x9B\x3\x2\x2\x2");
		sb.Append("!\xA0\x3\x2\x2\x2#\xA6\x3\x2\x2\x2%\xA8\x3\x2\x2\x2\'\xAD\x3");
		sb.Append("\x2\x2\x2)\xB2\x3\x2\x2\x2+\xB5\x3\x2\x2\x2-\xB9\x3\x2\x2\x2");
		sb.Append("/\xC3\x3\x2\x2\x2\x31\xCD\x3\x2\x2\x2\x33\xD7\x3\x2\x2\x2\x35");
		sb.Append("\xD9\x3\x2\x2\x2\x37\xDE\x3\x2\x2\x2\x39:\a.\x2\x2:\x4\x3\x2");
		sb.Append("\x2\x2;<\a+\x2\x2<\x6\x3\x2\x2\x2=>\a_\x2\x2>\b\x3\x2\x2\x2");
		sb.Append("?@\a]\x2\x2@\n\x3\x2\x2\x2\x41\x42\av\x2\x2\x42\x43\at\x2\x2");
		sb.Append("\x43\x44\aw\x2\x2\x44\x45\ag\x2\x2\x45\f\x3\x2\x2\x2\x46G\a");
		sb.Append("h\x2\x2GH\a\x63\x2\x2HI\an\x2\x2IJ\au\x2\x2JK\ag\x2\x2K\xE\x3");
		sb.Append("\x2\x2\x2LM\ap\x2\x2MN\aw\x2\x2NO\an\x2\x2OP\an\x2\x2P\x10\x3");
		sb.Append("\x2\x2\x2QS\a/\x2\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2SU\x3\x2\x2");
		sb.Append("\x2TV\t\x2\x2\x2UT\x3\x2\x2\x2VW\x3\x2\x2\x2WU\x3\x2\x2\x2W");
		sb.Append("X\x3\x2\x2\x2X\x12\x3\x2\x2\x2Y[\a/\x2\x2ZY\x3\x2\x2\x2Z[\x3");
		sb.Append("\x2\x2\x2[_\x3\x2\x2\x2\\^\t\x2\x2\x2]\\\x3\x2\x2\x2^\x61\x3");
		sb.Append("\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\x62\x3\x2\x2\x2\x61_");
		sb.Append("\x3\x2\x2\x2\x62\x64\a\x30\x2\x2\x63\x65\t\x2\x2\x2\x64\x63");
		sb.Append("\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3");
		sb.Append("\x2\x2\x2g\x14\x3\x2\x2\x2hj\t\x2\x2\x2ih\x3\x2\x2\x2jk\x3\x2");
		sb.Append("\x2\x2kl\x3\x2\x2\x2ki\x3\x2\x2\x2l\x16\x3\x2\x2\x2mo\t\x3\x2");
		sb.Append("\x2np\t\x4\x2\x2on\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2q");
		sb.Append("r\x5\x15\v\x2r\x18\x3\x2\x2\x2sx\a$\x2\x2tw\x5\x1F\x10\x2uw");
		sb.Append("\n\x5\x2\x2vt\x3\x2\x2\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2");
		sb.Append("\x2\x2xy\x3\x2\x2\x2y{\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a$\x2\x2");
		sb.Append("|\x1A\x3\x2\x2\x2}\x82\a)\x2\x2~\x81\x5\x1F\x10\x2\x7F\x81\n");
		sb.Append("\x6\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2");
		sb.Append("\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2");
		sb.Append("\x2\x2\x84\x82\x3\x2\x2\x2\x85\x86\a)\x2\x2\x86\x87\x3\x2\x2");
		sb.Append("\x2\x87\x88\b\xE\x2\x2\x88\x1C\x3\x2\x2\x2\x89\x94\a\x62\x2");
		sb.Append("\x2\x8A\x93\x5\x1D\xF\x2\x8B\x8C\a\'\x2\x2\x8C\x93\a\x62\x2");
		sb.Append("\x2\x8D\x8E\a\'\x2\x2\x8E\x93\a)\x2\x2\x8F\x90\a\'\x2\x2\x90");
		sb.Append("\x93\a\'\x2\x2\x91\x93\n\x6\x2\x2\x92\x8A\x3\x2\x2\x2\x92\x8B");
		sb.Append("\x3\x2\x2\x2\x92\x8D\x3\x2\x2\x2\x92\x8F\x3\x2\x2\x2\x92\x91");
		sb.Append("\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x94\x92");
		sb.Append("\x3\x2\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x97\x98");
		sb.Append("\a)\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9A\b\xF\x2\x2\x9A\x1E\x3");
		sb.Append("\x2\x2\x2\x9B\x9E\a\'\x2\x2\x9C\x9F\t\a\x2\x2\x9D\x9F\x5!\x11");
		sb.Append("\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9D\x3\x2\x2\x2\x9F \x3\x2\x2\x2");
		sb.Append("\xA0\xA1\aw\x2\x2\xA1\xA2\x5#\x12\x2\xA2\xA3\x5#\x12\x2\xA3");
		sb.Append("\xA4\x5#\x12\x2\xA4\xA5\x5#\x12\x2\xA5\"\x3\x2\x2\x2\xA6\xA7");
		sb.Append("\t\b\x2\x2\xA7$\x3\x2\x2\x2\xA8\xA9\a(\x2\x2\xA9\xAA\x5\'\x14");
		sb.Append("\x2\xAA\xAB\x5)\x15\x2\xAB\xAC\x5+\x16\x2\xAC&\x3\x2\x2\x2\xAD");
		sb.Append("\xAE\t\t\x2\x2\xAE(\x3\x2\x2\x2\xAF\xB1\t\n\x2\x2\xB0\xAF\x3");
		sb.Append("\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3");
		sb.Append("\x2\x2\x2\xB3*\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB6\t\v\x2");
		sb.Append("\x2\xB6,\x3\x2\x2\x2\xB7\xBA\x5/\x18\x2\xB8\xBA\x5\x33\x1A\x2");
		sb.Append("\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xC0\x3\x2\x2\x2");
		sb.Append("\xBB\xBF\x5/\x18\x2\xBC\xBF\x5\x31\x19\x2\xBD\xBF\n\f\x2\x2");
		sb.Append("\xBE\xBB\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBD\x3\x2\x2\x2");
		sb.Append("\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2");
		sb.Append("\xC1.\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC8\a*\x2\x2\xC4\xC7");
		sb.Append("\x5/\x18\x2\xC5\xC7\v\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC5\x3");
		sb.Append("\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC8\xC6\x3");
		sb.Append("\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a");
		sb.Append("+\x2\x2\xCC\x30\x3\x2\x2\x2\xCD\xD2\a]\x2\x2\xCE\xD1\x5\x31");
		sb.Append("\x19\x2\xCF\xD1\v\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xCF\x3\x2");
		sb.Append("\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD2\xD0\x3\x2");
		sb.Append("\x2\x2\xD3\xD5\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD6\a_\x2");
		sb.Append("\x2\xD6\x32\x3\x2\x2\x2\xD7\xD8\t\t\x2\x2\xD8\x34\x3\x2\x2\x2");
		sb.Append("\xD9\xDA\n\t\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\b\x1B\x3\x2\xDC");
		sb.Append("\x36\x3\x2\x2\x2\xDD\xDF\t\r\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF\xE0");
		sb.Append("\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2");
		sb.Append("\x3\x2\x2\x2\xE2\xE3\b\x1C\x3\x2\xE3\x38\x3\x2\x2\x2\x1A\x2");
		sb.Append("RWZ_\x66kovx\x80\x82\x92\x94\x9E\xB2\xB9\xBE\xC0\xC6\xC8\xD0");
		sb.Append("\xD2\xE0\x4\t\f\x2\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
